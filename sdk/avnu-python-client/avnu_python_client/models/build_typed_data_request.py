# coding: utf-8

"""
    AVNU API

    REST API documentation for accessing liquidity on Layer 2.  AVNU is a decentralized exchange protocol enabling the fastest and the most efficient operations in DeFi for Layer 2 with better pricing, zero slippage, MEV-protection and gasless trading.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from avnu_python_client.models.call import Call
from typing import Optional, Set
from typing_extensions import Self

class BuildTypedDataRequest(BaseModel):
    """
    BuildTypedDataRequest
    """ # noqa: E501
    user_address: StrictStr = Field(description="The user's address", alias="userAddress")
    calls: List[Call] = Field(description="The list of calls that will be executed")
    gas_token_address: Optional[StrictStr] = Field(default=None, description="Gas token address.If null, there is two options:1. the user must have a reward compatible with the calls. In this case, the reward's sponsor will pay the gas fees in ETH.2. the api-key header must be field. The api-key's owner will be charged for the consumed gas fees in ETH", alias="gasTokenAddress")
    max_gas_token_amount: Optional[StrictStr] = Field(default=None, description="Max gas token amountIf null, there is two options:1. the user must have a reward compatible with the calls. In this case, the reward's sponsor will pay the gas fees in ETH.2. the api-key header must be field. The api-key's owner will be charged for the consumed gas fees in ETH", alias="maxGasTokenAmount")
    account_class_hash: Optional[StrictStr] = Field(default=None, description="Only set this field when the account is not deployed. When the accountClassHash is defined, the API will not check the gasless compatibility by calling the supportsInterface entrypoint but will instead look into an internal map. If the classHash is not supported by the API, please contact us so we can quickly add support.", alias="accountClassHash")
    __properties: ClassVar[List[str]] = ["userAddress", "calls", "gasTokenAddress", "maxGasTokenAmount", "accountClassHash"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BuildTypedDataRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in calls (list)
        _items = []
        if self.calls:
            for _item_calls in self.calls:
                if _item_calls:
                    _items.append(_item_calls.to_dict())
            _dict['calls'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BuildTypedDataRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "userAddress": obj.get("userAddress"),
            "calls": [Call.from_dict(_item) for _item in obj["calls"]] if obj.get("calls") is not None else None,
            "gasTokenAddress": obj.get("gasTokenAddress"),
            "maxGasTokenAmount": obj.get("maxGasTokenAmount"),
            "accountClassHash": obj.get("accountClassHash")
        })
        return _obj


