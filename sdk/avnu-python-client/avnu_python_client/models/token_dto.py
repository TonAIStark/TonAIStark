# coding: utf-8

"""
    AVNU API

    REST API documentation for accessing liquidity on Layer 2.  AVNU is a decentralized exchange protocol enabling the fastest and the most efficient operations in DeFi for Layer 2 with better pricing, zero slippage, MEV-protection and gasless trading.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class TokenDto(BaseModel):
    """
    TokenDto
    """ # noqa: E501
    name: StrictStr
    address: StrictStr
    symbol: StrictStr
    decimals: StrictInt
    logo_uri: Optional[StrictStr] = Field(default=None, alias="logoUri")
    last_daily_volume_usd: Union[StrictFloat, StrictInt] = Field(alias="lastDailyVolumeUsd")
    extensions: Dict[str, StrictStr]
    tags: List[StrictStr]
    __properties: ClassVar[List[str]] = ["name", "address", "symbol", "decimals", "logoUri", "lastDailyVolumeUsd", "extensions", "tags"]

    @field_validator('tags')
    def tags_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in set(['Unknown', 'Verified', 'Community', 'Unruggable', 'AVNU']):
                raise ValueError("each list item must be one of ('Unknown', 'Verified', 'Community', 'Unruggable', 'AVNU')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TokenDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TokenDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "address": obj.get("address"),
            "symbol": obj.get("symbol"),
            "decimals": obj.get("decimals"),
            "logoUri": obj.get("logoUri"),
            "lastDailyVolumeUsd": obj.get("lastDailyVolumeUsd"),
            "extensions": obj.get("extensions"),
            "tags": obj.get("tags")
        })
        return _obj


