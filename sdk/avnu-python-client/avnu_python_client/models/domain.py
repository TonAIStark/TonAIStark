# coding: utf-8

"""
    AVNU API

    REST API documentation for accessing liquidity on Layer 2.  AVNU is a decentralized exchange protocol enabling the fastest and the most efficient operations in DeFi for Layer 2 with better pricing, zero slippage, MEV-protection and gasless trading.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from avnu_python_client.models.json_primitive import JsonPrimitive
from typing import Optional, Set
from typing_extensions import Self

class Domain(BaseModel):
    """
    Domain
    """ # noqa: E501
    name: JsonPrimitive
    version: JsonPrimitive
    chain_id: JsonPrimitive = Field(alias="chainId")
    revision: Optional[JsonPrimitive] = None
    resolved_revision: StrictStr = Field(alias="resolvedRevision")
    separator_namelib: StrictStr = Field(alias="separatorName$lib")
    __properties: ClassVar[List[str]] = ["name", "version", "chainId", "revision", "resolvedRevision", "separatorName$lib"]

    @field_validator('resolved_revision')
    def resolved_revision_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['V0', 'V1']):
            raise ValueError("must be one of enum values ('V0', 'V1')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Domain from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict['name'] = self.name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of version
        if self.version:
            _dict['version'] = self.version.to_dict()
        # override the default output from pydantic by calling `to_dict()` of chain_id
        if self.chain_id:
            _dict['chainId'] = self.chain_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of revision
        if self.revision:
            _dict['revision'] = self.revision.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Domain from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": JsonPrimitive.from_dict(obj["name"]) if obj.get("name") is not None else None,
            "version": JsonPrimitive.from_dict(obj["version"]) if obj.get("version") is not None else None,
            "chainId": JsonPrimitive.from_dict(obj["chainId"]) if obj.get("chainId") is not None else None,
            "revision": JsonPrimitive.from_dict(obj["revision"]) if obj.get("revision") is not None else None,
            "resolvedRevision": obj.get("resolvedRevision"),
            "separatorName$lib": obj.get("separatorName$lib")
        })
        return _obj


