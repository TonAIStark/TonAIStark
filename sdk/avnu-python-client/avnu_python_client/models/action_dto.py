# coding: utf-8

"""
    AVNU API

    REST API documentation for accessing liquidity on Layer 2.  AVNU is a decentralized exchange protocol enabling the fastest and the most efficient operations in DeFi for Layer 2 with better pricing, zero slippage, MEV-protection and gasless trading.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from avnu_python_client.models.gas_fee_info import GasFeeInfo
from typing import Optional, Set
from typing_extensions import Self

class ActionDto(BaseModel):
    """
    ActionDto
    """ # noqa: E501
    block_number: StrictInt = Field(alias="blockNumber")
    var_date: datetime = Field(alias="date")
    transaction_hash: StrictStr = Field(alias="transactionHash")
    gas_fee: Optional[GasFeeInfo] = Field(default=None, alias="gasFee")
    type: StrictStr
    metadata: Dict[str, Any]
    __properties: ClassVar[List[str]] = ["blockNumber", "date", "transactionHash", "gasFee", "type", "metadata"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Swap', 'OpenDcaOrder', 'CancelDcaOrder', 'DcaTrade', 'StakingStake', 'StakingInitiateWithdrawal', 'StakingCancelWithdrawal', 'StakingWithdraw', 'StakingClaimRewards']):
            raise ValueError("must be one of enum values ('Swap', 'OpenDcaOrder', 'CancelDcaOrder', 'DcaTrade', 'StakingStake', 'StakingInitiateWithdrawal', 'StakingCancelWithdrawal', 'StakingWithdraw', 'StakingClaimRewards')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ActionDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of gas_fee
        if self.gas_fee:
            _dict['gasFee'] = self.gas_fee.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ActionDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "blockNumber": obj.get("blockNumber"),
            "date": obj.get("date"),
            "transactionHash": obj.get("transactionHash"),
            "gasFee": GasFeeInfo.from_dict(obj["gasFee"]) if obj.get("gasFee") is not None else None,
            "type": obj.get("type"),
            "metadata": obj.get("metadata")
        })
        return _obj


