# coding: utf-8

"""
    AVNU API

    REST API documentation for accessing liquidity on Layer 2.  AVNU is a decentralized exchange protocol enabling the fastest and the most efficient operations in DeFi for Layer 2 with better pricing, zero slippage, MEV-protection and gasless trading.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from avnu_python_client.models.gasless import Gasless
from avnu_python_client.models.route import Route
from typing import Optional, Set
from typing_extensions import Self

class Quote(BaseModel):
    """
    Quote
    """ # noqa: E501
    quote_id: StrictStr = Field(description="The unique id of the quote", alias="quoteId")
    sell_token_address: StrictStr = Field(description="The token address user wants to sell", alias="sellTokenAddress")
    sell_amount: StrictStr = Field(description="The amount of sellAmount that would be sold in this swap", alias="sellAmount")
    sell_amount_in_usd: Union[StrictFloat, StrictInt] = Field(description="The amount of sellAmount that would be sold in this swap in usd", alias="sellAmountInUsd")
    buy_token_address: StrictStr = Field(description="The token address user wants to buy", alias="buyTokenAddress")
    buy_amount: StrictStr = Field(description="The amount of buyToken that would be bought in this swap", alias="buyAmount")
    buy_amount_in_usd: Union[StrictFloat, StrictInt] = Field(description="The amount of buyToken that would be bought in this swap in usd", alias="buyAmountInUsd")
    buy_amount_without_fees: StrictStr = Field(description="The amount of buyToken without fees", alias="buyAmountWithoutFees")
    buy_amount_without_fees_in_usd: Union[StrictFloat, StrictInt] = Field(description="The amount of buyToken without fees in usd", alias="buyAmountWithoutFeesInUsd")
    estimated_amount: StrictBool = Field(description="If true, user should define a slippage when he executes the quote", alias="estimatedAmount")
    chain_id: StrictStr = Field(description="The chain's id", alias="chainId")
    block_number: Optional[StrictStr] = Field(default=None, description="Defined when quote comes from a DEX", alias="blockNumber")
    expiry: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Unix timestamp when quotes expires in seconds")
    routes: List[Route]
    gas_fees: StrictStr = Field(description="The estimated amount of gas fees", alias="gasFees")
    gas_fees_in_usd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The estimated amount of gas fees in USD", alias="gasFeesInUsd")
    avnu_fees: StrictStr = Field(description="The actual fees taken by AVNU", alias="avnuFees")
    avnu_fees_in_usd: Union[StrictFloat, StrictInt] = Field(description="The actual fees taken by AVNU is usd", alias="avnuFeesInUsd")
    avnu_fees_bps: StrictStr = Field(description="The fees in bps taken by AVNU", alias="avnuFeesBps")
    integrator_fees: StrictStr = Field(description="The actual fees taken by the integrator", alias="integratorFees")
    integrator_fees_in_usd: Union[StrictFloat, StrictInt] = Field(description="The actual fees taken by the integrator in usd", alias="integratorFeesInUsd")
    integrator_fees_bps: StrictStr = Field(description="The fees in bps taken by the integrator", alias="integratorFeesBps")
    price_ratio_usd: Union[StrictFloat, StrictInt] = Field(description="Price ratio in usd and in bps", alias="priceRatioUsd")
    liquidity_source: StrictStr = Field(description="The type of liquidity source", alias="liquiditySource")
    sell_token_price_in_usd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount in USD to buy 1 sellToken", alias="sellTokenPriceInUsd")
    buy_token_price_in_usd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount in USD to buy 1 buyToken", alias="buyTokenPriceInUsd")
    gasless: Gasless
    __properties: ClassVar[List[str]] = ["quoteId", "sellTokenAddress", "sellAmount", "sellAmountInUsd", "buyTokenAddress", "buyAmount", "buyAmountInUsd", "buyAmountWithoutFees", "buyAmountWithoutFeesInUsd", "estimatedAmount", "chainId", "blockNumber", "expiry", "routes", "gasFees", "gasFeesInUsd", "avnuFees", "avnuFeesInUsd", "avnuFeesBps", "integratorFees", "integratorFeesInUsd", "integratorFeesBps", "priceRatioUsd", "liquiditySource", "sellTokenPriceInUsd", "buyTokenPriceInUsd", "gasless"]

    @field_validator('liquidity_source')
    def liquidity_source_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['TOKEN_WRAPPER', 'DEX_AGGREGATOR', 'MARKET_MAKER', 'ORDERBOOK']):
            raise ValueError("must be one of enum values ('TOKEN_WRAPPER', 'DEX_AGGREGATOR', 'MARKET_MAKER', 'ORDERBOOK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Quote from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in routes (list)
        _items = []
        if self.routes:
            for _item_routes in self.routes:
                if _item_routes:
                    _items.append(_item_routes.to_dict())
            _dict['routes'] = _items
        # override the default output from pydantic by calling `to_dict()` of gasless
        if self.gasless:
            _dict['gasless'] = self.gasless.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Quote from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "quoteId": obj.get("quoteId"),
            "sellTokenAddress": obj.get("sellTokenAddress"),
            "sellAmount": obj.get("sellAmount"),
            "sellAmountInUsd": obj.get("sellAmountInUsd"),
            "buyTokenAddress": obj.get("buyTokenAddress"),
            "buyAmount": obj.get("buyAmount"),
            "buyAmountInUsd": obj.get("buyAmountInUsd"),
            "buyAmountWithoutFees": obj.get("buyAmountWithoutFees"),
            "buyAmountWithoutFeesInUsd": obj.get("buyAmountWithoutFeesInUsd"),
            "estimatedAmount": obj.get("estimatedAmount"),
            "chainId": obj.get("chainId"),
            "blockNumber": obj.get("blockNumber"),
            "expiry": obj.get("expiry"),
            "routes": [Route.from_dict(_item) for _item in obj["routes"]] if obj.get("routes") is not None else None,
            "gasFees": obj.get("gasFees"),
            "gasFeesInUsd": obj.get("gasFeesInUsd"),
            "avnuFees": obj.get("avnuFees"),
            "avnuFeesInUsd": obj.get("avnuFeesInUsd"),
            "avnuFeesBps": obj.get("avnuFeesBps"),
            "integratorFees": obj.get("integratorFees"),
            "integratorFeesInUsd": obj.get("integratorFeesInUsd"),
            "integratorFeesBps": obj.get("integratorFeesBps"),
            "priceRatioUsd": obj.get("priceRatioUsd"),
            "liquiditySource": obj.get("liquiditySource"),
            "sellTokenPriceInUsd": obj.get("sellTokenPriceInUsd"),
            "buyTokenPriceInUsd": obj.get("buyTokenPriceInUsd"),
            "gasless": Gasless.from_dict(obj["gasless"]) if obj.get("gasless") is not None else None
        })
        return _obj


