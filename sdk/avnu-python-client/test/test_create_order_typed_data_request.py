# coding: utf-8

"""
    AVNU API

    REST API documentation for accessing liquidity on Layer 2.  AVNU is a decentralized exchange protocol enabling the fastest and the most efficient operations in DeFi for Layer 2 with better pricing, zero slippage, MEV-protection and gasless trading.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from avnu_python_client.models.create_order_typed_data_request import CreateOrderTypedDataRequest

class TestCreateOrderTypedDataRequest(unittest.TestCase):
    """CreateOrderTypedDataRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreateOrderTypedDataRequest:
        """Test CreateOrderTypedDataRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreateOrderTypedDataRequest`
        """
        model = CreateOrderTypedDataRequest()
        if include_optional:
            return CreateOrderTypedDataRequest(
                trader_address = '',
                sell_token_address = '',
                sell_amount = '',
                sell_amount_per_cycle = '',
                buy_token_address = '',
                frequency = avnu_python_client.models.create_order_typed_data_request_frequency.CreateOrderTypedDataRequest_frequency(
                    seconds = 56, 
                    zero = True, 
                    nano = 56, 
                    negative = True, 
                    units = [
                        avnu_python_client.models.create_order_typed_data_request_frequency_units_inner.CreateOrderTypedDataRequest_frequency_units_inner(
                            duration_estimated = True, 
                            time_based = True, 
                            date_based = True, )
                        ], ),
                start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                pricing_strategy = avnu_python_client.models.pricing_strategy.PricingStrategy(
                    token_to_min_amount = '', 
                    token_to_max_amount = '', ),
                gas_token_address = '0x053c91253bc9682c04929ca02ed00b3e423f6710d2ee7e0d5ebb06f3ecf368a8',
                max_gas_token_amount = ''
            )
        else:
            return CreateOrderTypedDataRequest(
                trader_address = '',
                sell_token_address = '',
                sell_amount = '',
                sell_amount_per_cycle = '',
                buy_token_address = '',
                frequency = avnu_python_client.models.create_order_typed_data_request_frequency.CreateOrderTypedDataRequest_frequency(
                    seconds = 56, 
                    zero = True, 
                    nano = 56, 
                    negative = True, 
                    units = [
                        avnu_python_client.models.create_order_typed_data_request_frequency_units_inner.CreateOrderTypedDataRequest_frequency_units_inner(
                            duration_estimated = True, 
                            time_based = True, 
                            date_based = True, )
                        ], ),
                pricing_strategy = avnu_python_client.models.pricing_strategy.PricingStrategy(
                    token_to_min_amount = '', 
                    token_to_max_amount = '', ),
                gas_token_address = '0x053c91253bc9682c04929ca02ed00b3e423f6710d2ee7e0d5ebb06f3ecf368a8',
        )
        """

    def testCreateOrderTypedDataRequest(self):
        """Test CreateOrderTypedDataRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
