# coding: utf-8

"""
    AVNU API

    REST API documentation for accessing liquidity on Layer 2.  AVNU is a decentralized exchange protocol enabling the fastest and the most efficient operations in DeFi for Layer 2 with better pricing, zero slippage, MEV-protection and gasless trading.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from avnu_python_client.models.order_page import OrderPage

class TestOrderPage(unittest.TestCase):
    """OrderPage unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OrderPage:
        """Test OrderPage
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OrderPage`
        """
        model = OrderPage()
        if include_optional:
            return OrderPage(
                content = [
                    avnu_python_client.models.order_response_dto.OrderResponseDto(
                        id = '', 
                        block_number = 1.337, 
                        timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        trader_address = '', 
                        order_address = '', 
                        creation_transaction_hash = '', 
                        order_class_hash = '', 
                        sell_token_address = '', 
                        sell_amount = '', 
                        sell_amount_per_cycle = '', 
                        buy_token_address = '', 
                        start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        end_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        close_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        frequency = avnu_python_client.models.order_response_dto_frequency.OrderResponseDto_frequency(
                            seconds = 56, 
                            zero = True, 
                            nano = 56, 
                            negative = True, 
                            units = [
                                avnu_python_client.models.create_order_request_dto_frequency_units_inner.CreateOrderRequestDto_frequency_units_inner(
                                    duration_estimated = True, 
                                    duration = avnu_python_client.models.create_order_request_dto_frequency_units_inner_duration.CreateOrderRequestDto_frequency_units_inner_duration(
                                        seconds = 56, 
                                        zero = True, 
                                        nano = 56, 
                                        negative = True, ), 
                                    time_based = True, 
                                    date_based = True, )
                                ], ), 
                        iterations = 56, 
                        status = 'ACTIVE', 
                        pricing_strategy = avnu_python_client.models.pricing_strategy.PricingStrategy(
                            token_to_min_amount = '', 
                            token_to_max_amount = '', ), 
                        amount_sold = '', 
                        amount_bought = '', 
                        average_amount_bought = '', 
                        executed_trades_count = 56, 
                        cancelled_trades_count = 56, 
                        pending_trades_count = 56, 
                        trades = [
                            avnu_python_client.models.trade_response_dto.TradeResponseDto(
                                sell_amount = '', 
                                sell_amount_in_usd = 1.337, 
                                buy_amount = '', 
                                buy_amount_in_usd = 1.337, 
                                expected_trade_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                status = 'PENDING', 
                                actual_trade_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                tx_hash = '', 
                                error_reason = '', )
                            ], )
                    ],
                size = 56,
                number = 56,
                total_elements = 56,
                total_pages = 56
            )
        else:
            return OrderPage(
                content = [
                    avnu_python_client.models.order_response_dto.OrderResponseDto(
                        id = '', 
                        block_number = 1.337, 
                        timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        trader_address = '', 
                        order_address = '', 
                        creation_transaction_hash = '', 
                        order_class_hash = '', 
                        sell_token_address = '', 
                        sell_amount = '', 
                        sell_amount_per_cycle = '', 
                        buy_token_address = '', 
                        start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        end_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        close_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        frequency = avnu_python_client.models.order_response_dto_frequency.OrderResponseDto_frequency(
                            seconds = 56, 
                            zero = True, 
                            nano = 56, 
                            negative = True, 
                            units = [
                                avnu_python_client.models.create_order_request_dto_frequency_units_inner.CreateOrderRequestDto_frequency_units_inner(
                                    duration_estimated = True, 
                                    duration = avnu_python_client.models.create_order_request_dto_frequency_units_inner_duration.CreateOrderRequestDto_frequency_units_inner_duration(
                                        seconds = 56, 
                                        zero = True, 
                                        nano = 56, 
                                        negative = True, ), 
                                    time_based = True, 
                                    date_based = True, )
                                ], ), 
                        iterations = 56, 
                        status = 'ACTIVE', 
                        pricing_strategy = avnu_python_client.models.pricing_strategy.PricingStrategy(
                            token_to_min_amount = '', 
                            token_to_max_amount = '', ), 
                        amount_sold = '', 
                        amount_bought = '', 
                        average_amount_bought = '', 
                        executed_trades_count = 56, 
                        cancelled_trades_count = 56, 
                        pending_trades_count = 56, 
                        trades = [
                            avnu_python_client.models.trade_response_dto.TradeResponseDto(
                                sell_amount = '', 
                                sell_amount_in_usd = 1.337, 
                                buy_amount = '', 
                                buy_amount_in_usd = 1.337, 
                                expected_trade_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                status = 'PENDING', 
                                actual_trade_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                tx_hash = '', 
                                error_reason = '', )
                            ], )
                    ],
                size = 56,
                number = 56,
                total_elements = 56,
                total_pages = 56,
        )
        """

    def testOrderPage(self):
        """Test OrderPage"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
