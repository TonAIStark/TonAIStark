# coding: utf-8

"""
    AVNU API

    REST API documentation for accessing liquidity on Layer 2.  AVNU is a decentralized exchange protocol enabling the fastest and the most efficient operations in DeFi for Layer 2 with better pricing, zero slippage, MEV-protection and gasless trading.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from avnu_python_client.models.quote import Quote

class TestQuote(unittest.TestCase):
    """Quote unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Quote:
        """Test Quote
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Quote`
        """
        model = Quote()
        if include_optional:
            return Quote(
                quote_id = '',
                sell_token_address = '',
                sell_amount = '',
                sell_amount_in_usd = 1.337,
                buy_token_address = '',
                buy_amount = '',
                buy_amount_in_usd = 1.337,
                buy_amount_without_fees = '',
                buy_amount_without_fees_in_usd = 1.337,
                estimated_amount = True,
                chain_id = '',
                block_number = '0x1',
                expiry = 1.337,
                routes = [
                    avnu_python_client.models.route.Route(
                        name = '10kSwap', 
                        address = '0x00975910cd99bc56bd289eaaa5cee6cd557f0ddafdb2ce6ebea15b158eb2c664', 
                        percent = 1, 
                        sell_token_address = '0x03e85bfbb8e2a42b7bead9e88e9a1b19dbccf661471061807292120462396ec9', 
                        buy_token_address = '0x005a643907b9a4bc6a55e9069c4fd5fd1f5c79a22470690f75556c4736e34426', )
                    ],
                gas_fees = '',
                gas_fees_in_usd = 1.337,
                avnu_fees = '',
                avnu_fees_in_usd = 1.337,
                avnu_fees_bps = '',
                integrator_fees = '',
                integrator_fees_in_usd = 1.337,
                integrator_fees_bps = '',
                price_ratio_usd = 1.337,
                liquidity_source = 'TOKEN_WRAPPER',
                sell_token_price_in_usd = 1.337,
                buy_token_price_in_usd = 1.337,
                gasless = avnu_python_client.models.gasless.Gasless(
                    active = True, 
                    gas_token_prices = [
                        avnu_python_client.models.gas_token_price_dto.GasTokenPriceDto(
                            token_address = '', 
                            gas_fees_in_gas_token = '', 
                            gas_fees_in_usd = 1.337, )
                        ], )
            )
        else:
            return Quote(
                quote_id = '',
                sell_token_address = '',
                sell_amount = '',
                sell_amount_in_usd = 1.337,
                buy_token_address = '',
                buy_amount = '',
                buy_amount_in_usd = 1.337,
                buy_amount_without_fees = '',
                buy_amount_without_fees_in_usd = 1.337,
                estimated_amount = True,
                chain_id = '',
                routes = [
                    avnu_python_client.models.route.Route(
                        name = '10kSwap', 
                        address = '0x00975910cd99bc56bd289eaaa5cee6cd557f0ddafdb2ce6ebea15b158eb2c664', 
                        percent = 1, 
                        sell_token_address = '0x03e85bfbb8e2a42b7bead9e88e9a1b19dbccf661471061807292120462396ec9', 
                        buy_token_address = '0x005a643907b9a4bc6a55e9069c4fd5fd1f5c79a22470690f75556c4736e34426', )
                    ],
                gas_fees = '',
                avnu_fees = '',
                avnu_fees_in_usd = 1.337,
                avnu_fees_bps = '',
                integrator_fees = '',
                integrator_fees_in_usd = 1.337,
                integrator_fees_bps = '',
                price_ratio_usd = 1.337,
                liquidity_source = 'TOKEN_WRAPPER',
                gasless = avnu_python_client.models.gasless.Gasless(
                    active = True, 
                    gas_token_prices = [
                        avnu_python_client.models.gas_token_price_dto.GasTokenPriceDto(
                            token_address = '', 
                            gas_fees_in_gas_token = '', 
                            gas_fees_in_usd = 1.337, )
                        ], ),
        )
        """

    def testQuote(self):
        """Test Quote"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
